From 39e82a63164329934d99fc17c237b14bfc829dd0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marc-Andr=C3=A9=20Harvey?= <ma@harveykersulis.com>
Date: Wed, 18 Jun 2025 22:15:33 -0400
Subject: [PATCH] Refactor output formatting to use "\r\n" instead of "\n\r"
 for consistency

- Updated all instances of output statements across multiple files to replace "\n\r" with "\r\n".
- Ensured that error and status messages maintain a consistent line ending format.
- This change improves readability and standardizes the output format across the application.
---
 client.cpp                          | 16 ++---
 directory_indexer.cpp               | 38 ++++++------
 growing_buffer.cpp                  | 16 ++---
 hash/md5_wrapper.cpp                |  4 +-
 main.cpp                            | 16 ++---
 program_options.cpp                 | 22 +++----
 server.cpp                          | 18 +++---
 sync_command.cpp                    | 12 ++--
 tcp_command/tcp_command_base.cpp    | 92 +++++++++++++--------------
 tcp_command/tcp_command_derived.cpp | 96 ++++++++++++++---------------
 tcp_command/tcp_command_utils.cpp   | 12 ++--
 11 files changed, 171 insertions(+), 171 deletions(-)

diff --git a/client.cpp b/client.cpp
index d6a0dc1..5ad044b 100644
--- a/client.cpp
+++ b/client.cpp
@@ -49,18 +49,18 @@ void ClientThread::runclient(context &ctx)
 
     if (connect(serverSocket, serverSocketAddr, sizeof(serverAddress)) < 0)
     {
-        std::cout << "Unable to connect to server at " << ctx.opts.ip << ":" << ctx.opts.port << "\n\r";
+        std::cout << "Unable to connect to server at " << ctx.opts.ip << ":" << ctx.opts.port << "\r\n";
         exit(0);
     }
 
-    std::cout << "Connected to server at " << ctx.opts.ip << ":" << ctx.opts.port << "\n\r";
+    std::cout << "Connected to server at " << ctx.opts.ip << ":" << ctx.opts.port << "\r\n";
 
     ctx.con_opened = true;
 
     // Request index from the server
     if (requestIndexFromServer(options) < 0)
     {
-        std::cout << "Error requesting index from server" << "\n\r";
+        std::cout << "Error requesting index from server" << "\r\n";
         close(serverSocket);
         return;
     }
@@ -71,7 +71,7 @@ void ClientThread::runclient(context &ctx)
         TcpCommand *receivedCommand = TcpCommand::receiveHeader(serverSocket);
         if (receivedCommand == nullptr)
         {
-            std::cout << "Error receiving command from server" << "\n\r";
+            std::cout << "Error receiving command from server" << "\r\n";
             break;
         }
         const std::string cmdName = receivedCommand->commandName();
@@ -102,23 +102,23 @@ void ClientThread::runclient(context &ctx)
                     break;
                 }
             default:
-                std::cout << "Unknown command received: " << "\n\r";
+                std::cout << "Unknown command received: " << "\r\n";
                 receivedCommand->dump(std::cout);
                 delete receivedCommand;
                 break;
         }
         if (err < 0)
         {
-            std::cout << "Error executing command: " << cmdName << "\n\r";
+            std::cout << "Error executing command: " << cmdName << "\r\n";
             ctx.con_opened = false;
         }
         else if (err > 0)
         {
-            std::cout << "Finished " << "\n\r";
+            std::cout << "Finished " << "\r\n";
             ctx.con_opened = false;
         }
         else
-            std::cout << "Executed command: " << cmdName << "\n\r";
+            std::cout << "Executed command: " << cmdName << "\r\n";
     }
 
     ctx.active = false;
diff --git a/directory_indexer.cpp b/directory_indexer.cpp
index 5087c8b..91f0389 100644
--- a/directory_indexer.cpp
+++ b/directory_indexer.cpp
@@ -59,7 +59,7 @@ DirectoryIndexer::DirectoryIndexer(const std::filesystem::path &path, bool topLe
             std:: cout << mFolderIndex.ParseFromIstream( &mIndexfile );
             mIndexfile.close();
 
-            std::cout << " done" << "\n\r";
+            std::cout << " done" << "\r\n";
         }
         
         if ( mFolderIndex.name().empty() )
@@ -99,7 +99,7 @@ void DirectoryIndexer::printIndex( com::fileindexer::Folder *folderIndex, int re
         std::cout << "\t" << folder.permissions();
         std::cout << "\t" << folder.type();
         std::cout << "\t" << *folder.mutable_modifiedtime();
-        std::cout << "\n\r";
+        std::cout << "\r\n";
         printIndex( &folder, recursionlevel + 1 );
     }
     for ( auto file : *folderIndex->mutable_files() )
@@ -109,7 +109,7 @@ void DirectoryIndexer::printIndex( com::fileindexer::Folder *folderIndex, int re
         std::cout << "\t" << file.type();
         std::cout << "\t" << *file.mutable_modifiedtime();
         std::cout << "\t" << *file.mutable_hash();
-        std::cout << "\n\r";
+        std::cout << "\r\n";
     }
 
 }
@@ -134,7 +134,7 @@ int DirectoryIndexer::indexonprotobuf( bool verbose )
         return -1;
     
     if ( verbose )
-        std::cout << mDir.path() << "\n\r";
+        std::cout << mDir.path() << "\r\n";
     
     for ( const auto& file : std::filesystem::directory_iterator( mDir.path() ) )
     {
@@ -321,7 +321,7 @@ void DirectoryIndexer::sync( com::fileindexer::Folder * folderIndex, DirectoryIn
     if (topLevel)
     {
         if (verbose)
-            std::cout << "\n\r" << "Exporting sync commands from local to remote" << "\n\r";
+            std::cout << "\r\n" << "Exporting sync commands from local to remote" << "\r\n";
         
         remote->sync(&mFolderIndex, remotePast, this, past, syncCommands, verbose, true);
         
@@ -336,18 +336,18 @@ void DirectoryIndexer::syncFolders(com::fileindexer::Folder *folderIndex, Direct
         auto remoteFolderPath = remoteFolder.name();
         auto localFolderPath = local->mDir.path().string() + "/" + remoteFolderPath.substr(remote->mDir.path().string().length() + 1);
         if (verbose)
-            std::cout << "Entering " << remoteFolderPath << "\n\r";
+            std::cout << "Entering " << remoteFolderPath << "\r\n";
 
         if (nullptr != extract(nullptr, localFolderPath, FOLDER))
         {
             if (verbose)
-                std::cout << "folder exists! " << localFolderPath << "\n\r";
+                std::cout << "folder exists! " << localFolderPath << "\r\n";
             sync(&remoteFolder, past, remote, remotePast, syncCommands, verbose, isRemote);
         }
         else
         {
             if (verbose)
-                std::cout << "folder missing! " << localFolderPath << "\n\r";
+                std::cout << "folder missing! " << localFolderPath << "\r\n";
 
             if (forcePull || (past->extract(nullptr, localFolderPath, FOLDER) == nullptr))
             {
@@ -371,11 +371,11 @@ void DirectoryIndexer::handleFileExists(com::fileindexer::File& remoteFile, com:
         FILE_TIME_COMP_RESULT compResult = compareFileTime(remoteFile.modifiedtime(), localFile->modifiedtime());
         if (compResult == FILE_TIME_COMP_RESULT::FILE_TIME_LENGTH_MISMATCH)
         {
-            std::cout << "ERROR IN COMPARING FILE TIMES, STRING OF DIFFERENT LENGTHS !!" << "\n\r";
+            std::cout << "ERROR IN COMPARING FILE TIMES, STRING OF DIFFERENT LENGTHS !!" << "\r\n";
         }
         else if (compResult == FILE_TIME_COMP_RESULT::FILE_TIME_EQUAL)
         {
-            std::cout << "ERROR IN COMPARING FILE TIMES, DIFFERENT HASH BUT SAME MODIFIED TIME !!" << "\n\r";
+            std::cout << "ERROR IN COMPARING FILE TIMES, DIFFERENT HASH BUT SAME MODIFIED TIME !!" << "\r\n";
         }
         else if (compResult == FILE_TIME_COMP_RESULT::FILE_TIME_FILE_B_OLDER)
         {
@@ -442,19 +442,19 @@ void DirectoryIndexer::syncFiles(com::fileindexer::Folder *folderIndex, Director
         auto remoteFilePath = remoteFile.name();
         auto localFilePath = local->mDir.path().string() + "/" + remoteFilePath.substr(remote->mDir.path().string().length() + 1);
         if (verbose)
-            std::cout << "checking " << remoteFilePath << "\n\r";
+            std::cout << "checking " << remoteFilePath << "\r\n";
 
         auto *localFile = static_cast<com::fileindexer::File *>(extract(nullptr, localFilePath, FILE));
         if (localFile != nullptr)
         {
             if (verbose)
-                std::cout << "file exists! " << localFilePath << "\n\r";
+                std::cout << "file exists! " << localFilePath << "\r\n";
             handleFileExists(remoteFile, localFile, remoteFilePath, localFilePath, syncCommands, isRemote);
         }
         else
         {
             if (verbose)
-                std::cout << "file missing! " << localFilePath << "\n\r";
+                std::cout << "file missing! " << localFilePath << "\r\n";
             handleFileMissing(remoteFile, remoteFilePath, localFilePath, past, syncCommands, isRemote, forcePull, verbose);
         }
     }
@@ -476,7 +476,7 @@ void DirectoryIndexer::postProcessSyncCommands(SyncCommands &syncCommands, Direc
             {
                 if (!remote->removePath(nullptr, it->path1(), type))
                 {
-                    std::cout << "ERROR: PATH " << it->path1() << " NOT FOUND IN EITHER INDEXES" << "\n\r";
+                    std::cout << "ERROR: PATH " << it->path1() << " NOT FOUND IN EITHER INDEXES" << "\r\n";
                 }
             }
         }
@@ -652,7 +652,7 @@ std::list<std::string> DirectoryIndexer::__extractPathComponents( const std::fil
     {
         pathComponents.push_front( pathcopy.filename() );
         if ( verbose )
-            std::cout << pathcopy.filename() << "\n\r";
+            std::cout << pathcopy.filename() << "\r\n";
         pathcopy = pathcopy.parent_path();
     } while ( pathcopy != "/" );
     return pathComponents;
@@ -757,10 +757,10 @@ void DirectoryIndexer::copyTo( com::fileindexer::Folder * folderIndex, ::google:
         if ( folderIndex == nullptr )
             folderIndex = &mFolderIndex;
         /* error out */
-        std::cout << "Error: Couldn't locate " << insertPath << " inside " << folderIndex->name() << "\n\r";
-        std::cout << "Maybe this info can help:" << "\n\r";
-        std::cout << "    path = " << path << "\n\r";
-        std::cout << "    type = " << ((type == FOLDER) ? "FOLDER" : "FILE") << "\n\r";
+        std::cout << "Error: Couldn't locate " << insertPath << " inside " << folderIndex->name() << "\r\n";
+        std::cout << "Maybe this info can help:" << "\r\n";
+        std::cout << "    path = " << path << "\r\n";
+        std::cout << "    type = " << ((type == FOLDER) ? "FOLDER" : "FILE") << "\r\n";
         exit(1);
     }
 
diff --git a/growing_buffer.cpp b/growing_buffer.cpp
index df2b0d5..02603ca 100644
--- a/growing_buffer.cpp
+++ b/growing_buffer.cpp
@@ -70,15 +70,15 @@ size_t GrowingBuffer::write(const void *buf, const size_t size) {
 void GrowingBuffer::dumpToFile(FILE *fd, uintmax_t size) {
     size_t total_left = mSize - (mBufferIndex * mBufferSizes[0] + mIndex);
     if (size > total_left) size = total_left; // Clamp to available data
-    std::cout << "dump " << size << " bytes to file" << "\n\r";
-    std::cout << "mBufferIndex = " << mBufferIndex << "\n\r";
-    std::cout << "mBufferSizes[mBufferIndex] = " << mBufferSizes[mBufferIndex] << "\n\r";
-    std::cout << "mIndex = " << mIndex << "\n\r";
+    std::cout << "dump " << size << " bytes to file" << "\r\n";
+    std::cout << "mBufferIndex = " << mBufferIndex << "\r\n";
+    std::cout << "mBufferSizes[mBufferIndex] = " << mBufferSizes[mBufferIndex] << "\r\n";
+    std::cout << "mIndex = " << mIndex << "\r\n";
     std::cout << "data = ";
     for (int i = 0; i < 8 && (mIndex + i) < mBufferSizes[mBufferIndex]; ++i) {
         printf("%02x ", *(static_cast<uint8_t *>(mBuffers[mBufferIndex]) + mIndex + i));
     }
-    std::cout << "\n\r";
+    std::cout << "\r\n";
     while (size > 0) {
         size_t chunk = std::min(mBufferSizes[mBufferIndex] - mIndex, (size_t)size);
         auto w_size = fwrite(static_cast<uint8_t *>(mBuffers[mBufferIndex]) + mIndex, 1, chunk, fd);
@@ -102,15 +102,15 @@ void GrowingBuffer::dump(std::ostream &os) {
     size_t dataSize = this->size();
     std::vector<uint8_t> buffer(dataSize);
     this->read(buffer.data(), dataSize);
-    os << "Raw mData (" << dataSize << " bytes):" << "\n\r";
+    os << "Raw mData (" << dataSize << " bytes):" << "\r\n";
     for (size_t i = 0; i < dataSize; ++i) {
         if ( i % 8 == 0 && i != 0 )
             os << "  ";
         if (i % 16 == 0)
-            os << "\n\r" << std::hex << std::setw(8) << std::setfill('0') << i << ": ";
+            os << "\r\n" << std::hex << std::setw(8) << std::setfill('0') << i << ": ";
         os << std::hex << std::setw(2) << std::setfill('0') << (int)buffer[i] << " ";
     }
-    os << std::dec << "\n\r";
+    os << std::dec << "\r\n";
     this->seek(prevIndex, mPublicIndex);
 }
 
diff --git a/hash/md5_wrapper.cpp b/hash/md5_wrapper.cpp
index 0251217..3aea2f5 100644
--- a/hash/md5_wrapper.cpp
+++ b/hash/md5_wrapper.cpp
@@ -32,14 +32,14 @@ MD5Calculator::MD5Calculator(const char *path, bool verbose)
         return;
 
     if ( verbose )
-        std::cout <<  filepath << "\n\r";
+        std::cout <<  filepath << "\r\n";
 
     std::error_code ec;
     uintmax_t filesize = std::filesystem::file_size(filepath, ec);
 
     if ( ec.value() != 0 )
     {
-        std::cerr << ec.message() << "\n\r";
+        std::cerr << ec.message() << "\r\n";
         return;
     }
 
diff --git a/main.cpp b/main.cpp
index 103a562..5204f31 100644
--- a/main.cpp
+++ b/main.cpp
@@ -30,7 +30,7 @@ int main(int argc, char *argv[])
 
     if (opts.ip.empty() && opts.mode == ProgramOptions::MODE_CLIENT)
     {
-        std::cout << "Invalid client configuration. Please specify the server IP and set mode to client." << "\n\r";
+        std::cout << "Invalid client configuration. Please specify the server IP and set mode to client." << "\r\n";
         return -1;
     }
 
@@ -40,7 +40,7 @@ int main(int argc, char *argv[])
         auto *server = new ServerThread(opts);
         if (server == nullptr)
         {
-            std::cout << "Error creating server thread" << "\n\r";
+            std::cout << "Error creating server thread" << "\r\n";
             return -1;
         }
 
@@ -50,26 +50,26 @@ int main(int argc, char *argv[])
             std::this_thread::sleep_for(std::chrono::milliseconds(10));
         }
 
-        std::cout << "Server is active and waiting for connections..." << "\n\r";
+        std::cout << "Server is active and waiting for connections..." << "\r\n";
 
         while (server->isActive())
         {
             static bool connected = false;
             if (server->isConnected() && !connected)
             {
-                std::cout << "Client connected." << "\n\r";
+                std::cout << "Client connected." << "\r\n";
                 connected = true;
             }
             else if (!server->isConnected() && connected)
             {
-                std::cout << "Client disconnected." << "\n\r";
+                std::cout << "Client disconnected." << "\r\n";
                 connected = false;
             }
             std::this_thread::sleep_for(std::chrono::milliseconds(10));
         }
 
         delete server;
-        std::cout << "Server thread finished" << "\n\r";
+        std::cout << "Server thread finished" << "\r\n";
     }
     else if (opts.mode == ProgramOptions::MODE_CLIENT)
     {
@@ -77,7 +77,7 @@ int main(int argc, char *argv[])
         auto *client = new ClientThread(opts);
         if (client == nullptr)
         {
-            std::cout << "Error creating client thread" << "\n\r";
+            std::cout << "Error creating client thread" << "\r\n";
             return -1;
         }
 
@@ -93,6 +93,6 @@ int main(int argc, char *argv[])
         }
 
         delete client;
-        std::cout << "Client thread finished" << "\n\r";
+        std::cout << "Client thread finished" << "\r\n";
     }
 }
\ No newline at end of file
diff --git a/program_options.cpp b/program_options.cpp
index b5c9e8c..e90fad7 100644
--- a/program_options.cpp
+++ b/program_options.cpp
@@ -26,14 +26,14 @@ ProgramOptions::ProgramOptions(int argc, char *argv[])
 // Section 7: Public/Protected/Private Methods
 void printusage()
 {
-	std::cout << "Usage:" << "\n\r";
-	std::cout << "\t" << "multi-pc-sync [-s <serverip:port> | -d <port>] [-r rate] [-y] [--dry-run] [--exit-after-sync] <path>" << "\n\r";
-	std::cout << "\t" << "-s" << "\t" << "connect to <serverip:port>, indexes the path and synchronizes folders" << "\n\r";
-	std::cout << "\t" << "-d" << "\t" << "start a synchronization daemon on <port> for <path>" << "\n\r";
-	std::cout << "\t" << "-r" << "\t" << "limit TCP command rate (Hz), 0 means unlimited (default: 0)" << "\n\r";
-	std::cout << "\t" << "-y" << "\t" << "skip Y/N prompt and automatically sync" << "\n\r";
-	std::cout << "\t" << "--dry-run" << "\t" << "print commands but don't execute them" << "\n\r";
-	std::cout << "\t" << "--exit-after-sync" << "\t" << "exit server after sending SyncDoneCmd (for unit testing)" << "\n\r";
+	std::cout << "Usage:" << "\r\n";
+	std::cout << "\t" << "multi-pc-sync [-s <serverip:port> | -d <port>] [-r rate] [-y] [--dry-run] [--exit-after-sync] <path>" << "\r\n";
+	std::cout << "\t" << "-s" << "\t" << "connect to <serverip:port>, indexes the path and synchronizes folders" << "\r\n";
+	std::cout << "\t" << "-d" << "\t" << "start a synchronization daemon on <port> for <path>" << "\r\n";
+	std::cout << "\t" << "-r" << "\t" << "limit TCP command rate (Hz), 0 means unlimited (default: 0)" << "\r\n";
+	std::cout << "\t" << "-y" << "\t" << "skip Y/N prompt and automatically sync" << "\r\n";
+	std::cout << "\t" << "--dry-run" << "\t" << "print commands but don't execute them" << "\r\n";
+	std::cout << "\t" << "--exit-after-sync" << "\t" << "exit server after sending SyncDoneCmd (for unit testing)" << "\r\n";
 	exit(0);
 }
 
@@ -49,11 +49,11 @@ ProgramOptions ProgramOptions::parseArgs(int argc, char *argv[])
     
     if ( !std::filesystem::is_directory( opts.path ) )
     {
-        std::cout << opts.path << " is not a valid directory" << "\n\r";
+        std::cout << opts.path << " is not a valid directory" << "\r\n";
         exit(0);
     } else if ( opts.path != std::filesystem::canonical( opts.path ) )
     {
-        std::cout << opts.path << " is not a valid path" << "\n\r";
+        std::cout << opts.path << " is not a valid path" << "\r\n";
         exit(0);
     }
 
@@ -90,7 +90,7 @@ ProgramOptions ProgramOptions::parseArgs(int argc, char *argv[])
         case 'r':
             opts.rate_limit = std::stof(optarg);
             if (opts.rate_limit < 0) {
-                std::cout << "Rate limit must be non-negative" << "\n\r";
+                std::cout << "Rate limit must be non-negative" << "\r\n";
                 exit(0);
             }
             break;
diff --git a/server.cpp b/server.cpp
index b3d30ec..5510f42 100644
--- a/server.cpp
+++ b/server.cpp
@@ -51,19 +51,19 @@ void ServerThread::runserver(context &ctx)
 
     if (bind(serverSocket, serverSocketAddr, sizeof(serverAddress)) != 0)
     {
-        std::cout << "Unable to bind to port " << ntohs(serverAddress.sin_port) << "\n\r";
+        std::cout << "Unable to bind to port " << ntohs(serverAddress.sin_port) << "\r\n";
         exit(0);
     }
 
     if (listen(serverSocket, 5) != 0)
     {
-        std::cout << "Unable to listen on socket" << "\n\r";
+        std::cout << "Unable to listen on socket" << "\r\n";
         exit(0);
     }
 
     while (!ctx.quit.load())
     {
-        std::cout << "Waiting for incoming connections on port " << ctx.opts.port << "\n\r";
+        std::cout << "Waiting for incoming connections on port " << ctx.opts.port << "\r\n";
 
         sockaddr_in clientAddress;
         sockaddr* clientSocketAddr = reinterpret_cast<sockaddr*>(&clientAddress);
@@ -71,12 +71,12 @@ void ServerThread::runserver(context &ctx)
         int clientSocket = accept(serverSocket, clientSocketAddr, &clientAddressLen);
         if (clientSocket < 0)
         {
-            std::cout << "Error accepting connection" << "\n\r";
+            std::cout << "Error accepting connection" << "\r\n";
             break;
         }
         options["txsocket"] = std::to_string(clientSocket);
         options["ip"] = inet_ntoa(clientAddress.sin_addr);
-        std::cout << "Incoming connection from " << options["ip"] << ":" << clientAddress.sin_port << "\n\r";
+        std::cout << "Incoming connection from " << options["ip"] << ":" << clientAddress.sin_port << "\r\n";
         ctx.con_opened = true;
 
         while (!ctx.quit.load() && ctx.con_opened)
@@ -84,7 +84,7 @@ void ServerThread::runserver(context &ctx)
             TcpCommand *receivedCommand = TcpCommand::receiveHeader(clientSocket);
             if (receivedCommand == nullptr)
             {
-                std::cout << "Error receiving command from client" << "\n\r";
+                std::cout << "Error receiving command from client" << "\r\n";
                 ctx.con_opened = false;
                 break;
             }
@@ -92,15 +92,15 @@ void ServerThread::runserver(context &ctx)
             int err = receivedCommand->execute(options);
             if (err < 0)
             {
-                std::cout << "Error executing command: " << receivedCommand->commandName() << "\n\r";
+                std::cout << "Error executing command: " << receivedCommand->commandName() << "\r\n";
                 ctx.con_opened = false;
             } else if (err > 0)
             {
-                std::cout << "Finished" << "\n\r";
+                std::cout << "Finished" << "\r\n";
                 ctx.con_opened = false;
             } else
             {
-                std::cout << "Executed command: " << receivedCommand->commandName() << "\n\r";
+                std::cout << "Executed command: " << receivedCommand->commandName() << "\r\n";
             }
             delete receivedCommand;
         }
diff --git a/sync_command.cpp b/sync_command.cpp
index 56349a0..35743ce 100644
--- a/sync_command.cpp
+++ b/sync_command.cpp
@@ -93,7 +93,7 @@ TcpCommand* SyncCommand::createTcpCommand() {
         commandbuf.write(&pathSize, sizeof(size_t));
         commandbuf.write(destPathStripped.c_str(), pathSize);
     } else {
-        std::cerr << "Unknown command: " << mCmd << "\n\r";
+        std::cerr << "Unknown command: " << mCmd << "\r\n";
         return nullptr;
     }
     return TcpCommand::create(commandbuf);
@@ -102,7 +102,7 @@ TcpCommand* SyncCommand::createTcpCommand() {
 int SyncCommand::executeTcpCommand(const std::map<std::string, std::string> &args) {
     TcpCommand *cmd = createTcpCommand();
     if (!cmd) {
-        std::cerr << "Failed to create TCP command for: " << string() << "\n\r";
+        std::cerr << "Failed to create TCP command for: " << string() << "\r\n";
         return -1;
     }
     if ( cmd->command() == TcpCommand::CMD_ID_FETCH_FILE_REQUEST )
@@ -135,7 +135,7 @@ int SyncCommand::executeTcpCommand(const std::map<std::string, std::string> &arg
 }
 
 void SyncCommand::print() {
-    std::cout << string() << "\n\r";
+    std::cout << string() << "\r\n";
 }
 
 int SyncCommand::execute(const std::map<std::string, std::string> &args, bool verbose) {
@@ -153,7 +153,7 @@ int SyncCommand::execute(const std::map<std::string, std::string> &args, bool ve
     } else {
         int err = system(string().c_str());
         if (verbose) {
-            std::cout << "Command returned " << err << "\n\r";
+            std::cout << "Command returned " << err << "\r\n";
         }
         return err;
     }
@@ -174,8 +174,8 @@ int SyncCommands::exportToFile(const std::filesystem::path &path, bool verbose)
     std::ofstream file(path);
     if (!file.is_open()) return -1;
     for (const auto &cmd : *this) {
-        file << cmd.string() << "\n\r";
-        if (verbose) std::cout << "Exported: " << cmd.string() << "\n\r";
+        file << cmd.string() << "\r\n";
+        if (verbose) std::cout << "Exported: " << cmd.string() << "\r\n";
     }
     file.close();
     return 0;
diff --git a/tcp_command/tcp_command_base.cpp b/tcp_command/tcp_command_base.cpp
index 3f35903..56e8079 100644
--- a/tcp_command/tcp_command_base.cpp
+++ b/tcp_command/tcp_command_base.cpp
@@ -132,10 +132,10 @@ TcpCommand* TcpCommand::receiveHeader(const int socket) {
     TcpCommand *command = TcpCommand::create(buffer);
     if (command == nullptr)
     {
-        std::cout << "Received unknown command ID: " << cmd << "\n\r";
+        std::cout << "Received unknown command ID: " << cmd << "\r\n";
         return nullptr;
     }
-    std::cout << "Received command " << command->commandName() << " of size " << commandSize << "\n\r";
+    std::cout << "Received command " << command->commandName() << " of size " << commandSize << "\r\n";
     
     return command;
 }
@@ -152,10 +152,10 @@ size_t TcpCommand::receivePayload(const int socket, const size_t maxlen) {
     //std::cout << "DEBUG: receivePayload starting with"
     //          << "\n  Target size: " << targetSize << " bytes"
     //          << "\n  Command size: " << cmdSize << " bytes"
-    //          << "\n  Current buffer size: " << mData.size() << " bytes" << "\n\r";
+    //          << "\n  Current buffer size: " << mData.size() << " bytes" << "\r\n";
 
     if (mData.seek(mData.size(), SEEK_SET) < 0) {
-        std::cerr << "Error seeking to end of buffer" << "\n\r";
+        std::cerr << "Error seeking to end of buffer" << "\r\n";
         delete[] buffer;
         return 0;
     }
@@ -167,23 +167,23 @@ size_t TcpCommand::receivePayload(const int socket, const size_t maxlen) {
         ssize_t n = recv(socket, buffer, bytesToReceive, 0);
         if (n <= 0) {
             if (n == 0) {
-                std::cerr << "Connection closed by peer after receiving " << totalReceived << " bytes" << "\n\r";
+                std::cerr << "Connection closed by peer after receiving " << totalReceived << " bytes" << "\r\n";
             } else {
-                std::cerr << "Receive error after " << totalReceived << " bytes: " << strerror(errno) << "\n\r";
+                std::cerr << "Receive error after " << totalReceived << " bytes: " << strerror(errno) << "\r\n";
             }
             delete[] buffer;
             return totalReceived;
         }
 
         if (mData.write(buffer, n) != n) {
-            std::cerr << "Error writing " << n << " bytes to buffer" << "\n\r";
+            std::cerr << "Error writing " << n << " bytes to buffer" << "\r\n";
             delete[] buffer;
             return totalReceived;
         }
 
         totalReceived += n;
         //std::cout << "DEBUG: receivePayload received " << n << " bytes (total: " << totalReceived 
-        //          << "/" << targetSize << ")" << "\n\r";
+        //          << "/" << targetSize << ")" << "\r\n";
     }
 
     delete[] buffer;
@@ -191,7 +191,7 @@ size_t TcpCommand::receivePayload(const int socket, const size_t maxlen) {
 }
 
 int TcpCommand::transmit(const std::map<std::string, std::string>& args, bool calculateSize) {
-    std::cout << "DEBUG: Transmitting command " << commandName() << " with size " << mData.size() << "\n\r";
+    std::cout << "DEBUG: Transmitting command " << commandName() << " with size " << mData.size() << "\r\n";
     if (calculateSize) {
         size_t size = mData.size();
         mData.seek(kSizeIndex, SEEK_SET);
@@ -214,7 +214,7 @@ int TcpCommand::transmit(const std::map<std::string, std::string>& args, bool ca
         remaining -= sent;
     }
 
-    std::cout << "Transmitted " << mData.size() << " bytes" << "\n\r";
+    std::cout << "Transmitted " << mData.size() << " bytes" << "\r\n";
 
     delete[] buffer;
     return 0;
@@ -224,40 +224,40 @@ int TcpCommand::SendFile(const std::map<std::string, std::string>& args) {
     const std::string& path = args.at("path");
     std::ifstream file(path, std::ios::binary | std::ios::ate);
     if (!file) {
-        std::cerr << "Failed to open file for reading: " << path << " - " << strerror(errno) << "\n\r";
+        std::cerr << "Failed to open file for reading: " << path << " - " << strerror(errno) << "\r\n";
         return -1;
     }
-    //std::cout << "DEBUG: Sending file: " << path << "\n\r";
+    //std::cout << "DEBUG: Sending file: " << path << "\r\n";
     int socket = std::stoi(args.at("txsocket"));
-    //std::cout << "DEBUG: Sending file header..." << "\n\r";
+    //std::cout << "DEBUG: Sending file header..." << "\r\n";
     size_t path_size = path.size();
     
     size_t sent_bytes = sendChunk(socket, &path_size, sizeof(size_t));
     if (sent_bytes < sizeof(size_t)) {
-        std::cerr << "Failed to send path size" << "\n\r";
+        std::cerr << "Failed to send path size" << "\r\n";
         return -1;
     }
-    //std::cout << "DEBUG: Path size sent: " << path_size << " bytes" << "\n\r";
+    //std::cout << "DEBUG: Path size sent: " << path_size << " bytes" << "\r\n";
     sent_bytes = sendChunk(socket, path.data(), path_size);
     if (sent_bytes < path_size) {
-        std::cerr << "Failed to send file path" << "\n\r";
+        std::cerr << "Failed to send file path" << "\r\n";
         return -1;
     }
-    //std::cout << "DEBUG: File path sent: " << path << "\n\r";
+    //std::cout << "DEBUG: File path sent: " << path << "\r\n";
     // Get the file size
     std::streamsize file_size = file.tellg();
     file.seekg(0, std::ios::beg);
-    //std::cout << "DEBUG: File size is " << file_size << " bytes" << "\n\r";
+    //std::cout << "DEBUG: File size is " << file_size << " bytes" << "\r\n";
     if (file_size < 0 || file_size > MAX_FILE_SIZE) {
-        std::cerr << "Invalid file size: " << file_size << " bytes" << "\n\r";
+        std::cerr << "Invalid file size: " << file_size << " bytes" << "\r\n";
         return -1;
     }
     // Send the file size
     size_t file_size_net = static_cast<size_t>(file_size);
-    //std::cout << "DEBUG: Sending file size: " << file_size_net << " bytes" << "\n\r";
+    //std::cout << "DEBUG: Sending file size: " << file_size_net << " bytes" << "\r\n";
     sent_bytes = sendChunk(socket, &file_size_net, sizeof(size_t));
     if (sent_bytes < sizeof(size_t)) {
-        std::cerr << "Failed to send file size" << "\n\r";
+        std::cerr << "Failed to send file size" << "\r\n";
         return -1;
     }
     
@@ -270,38 +270,38 @@ int TcpCommand::SendFile(const std::map<std::string, std::string>& args) {
         
         // Read chunk from file
         if (!file.read(reinterpret_cast<char*>(buffer), bytes_to_read)) {
-            std::cerr << "Failed to read from file after " << HumanReadable(total_bytes_sent) << " bytes" << "\n\r";
+            std::cerr << "Failed to read from file after " << HumanReadable(total_bytes_sent) << " bytes" << "\r\n";
             delete[] buffer;
             return -1;
         }
 
         size_t chunk_sent = sendChunk(socket, buffer, bytes_to_read);
         if (chunk_sent < bytes_to_read) {
-            std::cerr << "Failed to send file chunk after " << HumanReadable(total_bytes_sent) << " bytes" << "\n\r";
+            std::cerr << "Failed to send file chunk after " << HumanReadable(total_bytes_sent) << " bytes" << "\r\n";
             delete[] buffer;
             return -1;
         }
         total_bytes_sent += chunk_sent;
         //std::cout << "DEBUG: Sent chunk of " << chunk_sent 
         //          << " bytes (total sent: " << HumanReadable(total_bytes_sent) 
-        //          << "/" << HumanReadable(file_size) << ")" << "\n\r";
+        //          << "/" << HumanReadable(file_size) << ")" << "\r\n";
 
         // Force flush output to ensure logs appear in real-time
         std::cout << "Progress: " << HumanReadable(total_bytes_sent) << " of " << HumanReadable(file_size) 
-                  << " (" << (total_bytes_sent * 100 / file_size) << "%)" << "\n\r";
+                  << " (" << (total_bytes_sent * 100 / file_size) << "%)" << "\r\n";
     }
 
     //std::cout << "DEBUG: File send complete. Total bytes sent: " << HumanReadable(total_bytes_sent) 
-    //          << " of " << HumanReadable(file_size) << " expected" << "\n\r";
+    //          << " of " << HumanReadable(file_size) << " expected" << "\r\n";
 
     delete[] buffer;
     file.close();
-    //std::cout << "DEBUG: File " << path << " sent successfully." << "\n\r";
+    //std::cout << "DEBUG: File " << path << " sent successfully." << "\r\n";
     return 0;
 }
 
 int TcpCommand::ReceiveFile(const std::map<std::string, std::string>& args) {
-    //std::cout << "DEBUG: Starting ReceiveFile..." << "\n\r";
+    //std::cout << "DEBUG: Starting ReceiveFile..." << "\r\n";
     
     int socket = std::stoi(args.at("txsocket"));
 
@@ -309,32 +309,32 @@ int TcpCommand::ReceiveFile(const std::map<std::string, std::string>& args) {
     size_t path_size;
     int received_bytes = ReceiveChunk(socket, &path_size, kSizeSize);
     if (received_bytes < kSizeSize) {
-        std::cerr << "Failed to receive path size" << "\n\r";
+        std::cerr << "Failed to receive path size" << "\r\n";
         return -1;
     }
     if (path_size > MAX_STRING_SIZE) {
-        std::cerr << "Path size exceeds maximum allowed size: " << path_size << " > " << MAX_STRING_SIZE << "\n\r";
+        std::cerr << "Path size exceeds maximum allowed size: " << path_size << " > " << MAX_STRING_SIZE << "\r\n";
         return -1;
     }
     std::string received_path(path_size, '\0');
     received_bytes = ReceiveChunk(socket, received_path.data(), path_size);
     if (received_bytes < path_size) {
-        std::cerr << "Failed to receive file path" << "\n\r";
+        std::cerr << "Failed to receive file path" << "\r\n";
         return -1;
     }
-    //std::cout << "DEBUG: Received file path: " << received_path << "\n\r";
+    //std::cout << "DEBUG: Received file path: " << received_path << "\r\n";
     
     size_t file_size;
     received_bytes = ReceiveChunk(socket, &file_size, kSizeSize);
     if (received_bytes < kSizeSize) {
-        std::cerr << "Failed to receive file size" << "\n\r";
+        std::cerr << "Failed to receive file size" << "\r\n";
         return -1;
     }
     if (file_size > MAX_FILE_SIZE) {
-        std::cerr << "File size exceeds maximum allowed size: " << file_size << " > " << MAX_FILE_SIZE << "\n\r";
+        std::cerr << "File size exceeds maximum allowed size: " << file_size << " > " << MAX_FILE_SIZE << "\r\n";
         return -1;
     }
-    //std::cout << "DEBUG: Expected file size: " << HumanReadable(file_size) << "\n\r";
+    //std::cout << "DEBUG: Expected file size: " << HumanReadable(file_size) << "\r\n";
 
     if (file_size != 0)
     {
@@ -342,7 +342,7 @@ int TcpCommand::ReceiveFile(const std::map<std::string, std::string>& args) {
         std::ofstream file(path, std::ios::binary);
 
         if (!file) {
-            std::cerr << "Failed to open file for writing: " << path << " - " << strerror(errno) << "\n\r";
+            std::cerr << "Failed to open file for writing: " << path << " - " << strerror(errno) << "\r\n";
             return -1;
         }
 
@@ -354,13 +354,13 @@ int TcpCommand::ReceiveFile(const std::map<std::string, std::string>& args) {
 
             ssize_t chunk_received = ReceiveChunk(socket, buffer, bytes_to_read);
             if (chunk_received < 0) {
-                std::cerr << "Error receiving file chunk after " << HumanReadable(received_bytes) << "\n\r";
+                std::cerr << "Error receiving file chunk after " << HumanReadable(received_bytes) << "\r\n";
                 delete[] buffer;
                 file.flush();
                 return -1;
             }
             if (chunk_received == 0) {
-                std::cerr << "No more data received, connection may have been closed prematurely" << "\n\r";
+                std::cerr << "No more data received, connection may have been closed prematurely" << "\r\n";
                 delete[] buffer;
                 file.flush();
                 return -1;
@@ -368,7 +368,7 @@ int TcpCommand::ReceiveFile(const std::map<std::string, std::string>& args) {
             
             // Write the received chunk to file
             if (!file.write(reinterpret_cast<char*>(buffer), chunk_received)) {
-                std::cerr << "Failed to write to file at " << HumanReadable(received_bytes) << " bytes" << "\n\r";
+                std::cerr << "Failed to write to file at " << HumanReadable(received_bytes) << " bytes" << "\r\n";
                 delete[] buffer;
                 file.flush();
                 return -1;
@@ -377,10 +377,10 @@ int TcpCommand::ReceiveFile(const std::map<std::string, std::string>& args) {
             
             // Force flush output to ensure logs appear in real-time
             std::cout << "Progress: " << HumanReadable(received_bytes) << " of " << HumanReadable(file_size) 
-                    << " (" << (received_bytes * 100. / file_size) << "%)" << "\n\r";
+                    << " (" << (received_bytes * 100. / file_size) << "%)" << "\r\n";
         }
         //std::cout << "DEBUG: File receive complete. Wrote: " << HumanReadable(received_bytes)
-        //        << " of " << HumanReadable(file_size) << " to disk" << "\n\r";  
+        //        << " of " << HumanReadable(file_size) << " to disk" << "\r\n";  
         file.close();   // Will automatically flush the file buffer
         delete[] buffer;
     }
@@ -408,7 +408,7 @@ TcpCommand* TcpCommand::create(cmd_id_t cmd, std::map<std::string, std::string>&
         case CMD_ID_RMDIR_REQUEST:
         case CMD_ID_FETCH_FILE_REQUEST:
             if (args.find("path1") == args.end()) {
-                std::cerr << "Error: Missing required 'path1' argument for path-based command" << "\n\r";
+                std::cerr << "Error: Missing required 'path1' argument for path-based command" << "\r\n";
                 return nullptr;
             }
             {
@@ -442,7 +442,7 @@ TcpCommand* TcpCommand::create(cmd_id_t cmd, std::map<std::string, std::string>&
 
         case CMD_ID_REMOTE_LOCAL_COPY:
             if (args.find("path1") == args.end() || args.find("path2") == args.end()) {
-                std::cerr << "Error: Missing required 'path1' or 'path2' argument for REMOTE_LOCAL_COPY command" << "\n\r";
+                std::cerr << "Error: Missing required 'path1' or 'path2' argument for REMOTE_LOCAL_COPY command" << "\r\n";
                 return nullptr;
             }
             {
@@ -459,7 +459,7 @@ TcpCommand* TcpCommand::create(cmd_id_t cmd, std::map<std::string, std::string>&
 
         case CMD_ID_MESSAGE:
             if (args.find("path1") == args.end()) {
-                std::cerr << "Error: Missing required 'path1' argument for MESSAGE command" << "\n\r";
+                std::cerr << "Error: Missing required 'path1' argument for MESSAGE command" << "\r\n";
                 return nullptr;
             }
             command = new MessageCmd(args["path1"]);
@@ -472,12 +472,12 @@ TcpCommand* TcpCommand::create(cmd_id_t cmd, std::map<std::string, std::string>&
             command = new SyncDoneCmd(buffer);
             break;
         default:
-            std::cerr << "Error: Unknown command type: " << cmd << "\n\r";
+            std::cerr << "Error: Unknown command type: " << cmd << "\r\n";
             return nullptr;
     }
 
     if (!command) {
-        std::cerr << "Error: Failed to create command object" << "\n\r";
+        std::cerr << "Error: Failed to create command object" << "\r\n";
         return nullptr;
     }
 
diff --git a/tcp_command/tcp_command_derived.cpp b/tcp_command/tcp_command_derived.cpp
index cbdc834..4c04f5e 100644
--- a/tcp_command/tcp_command_derived.cpp
+++ b/tcp_command/tcp_command_derived.cpp
@@ -72,7 +72,7 @@ MessageCmd::~MessageCmd() {}
 void MessageCmd::sendMessage(const int socket, const std::string &message)
 {
     MessageCmd cmd(message);
-    std::cout << "[localhost] " << message << "\n\r";
+    std::cout << "[localhost] " << message << "\r\n";
     block_transmit();
     cmd.transmit({{"txsocket", std::to_string(socket)}});
     unblock_transmit();
@@ -100,7 +100,7 @@ int IndexFolderCmd::execute(const std::map<std::string,std::string> &args)
     }
     
     /* kick off the indexing */
-    std::cout << "starting to index " << args.at("path") << "\n\r";
+    std::cout << "starting to index " << args.at("path") << "\r\n";
     DirectoryIndexer indexer(args.at("path"), true, DirectoryIndexer::INDEX_TYPE_LOCAL);
     DirectoryIndexer *lastindexer = nullptr;
     if ( lastrunIndexPresent )
@@ -168,33 +168,33 @@ int IndexFolderCmd::execute(const std::map<std::string,std::string> &args)
         }
     } else 
     {
-        //std::cout << "DEBUG: Sending file: " << lastrunIndexFilename << "\n\r";
+        //std::cout << "DEBUG: Sending file: " << lastrunIndexFilename << "\r\n";
         int socket = std::stoi(args.at("txsocket"));
-        //std::cout << "DEBUG: Sending file header..." << "\n\r";
+        //std::cout << "DEBUG: Sending file header..." << "\r\n";
         size_t path_size = lastrunIndexFilename.size();
         
         size_t sent_bytes = sendChunk(socket, &path_size, sizeof(size_t));
         if (sent_bytes < sizeof(size_t)) {
-            std::cerr << "Failed to send path size" << "\n\r";
+            std::cerr << "Failed to send path size" << "\r\n";
             unblock_transmit();
             return -1;
         }
-        //std::cout << "DEBUG: Path size sent: " << path_size << " bytes" << "\n\r";
+        //std::cout << "DEBUG: Path size sent: " << path_size << " bytes" << "\r\n";
         sent_bytes = sendChunk(socket, lastrunIndexFilename.data(), path_size);
         if (sent_bytes < path_size) {
-            std::cerr << "Failed to send file path" << "\n\r";
+            std::cerr << "Failed to send file path" << "\r\n";
             unblock_transmit();
             return -1;
         }
-        //std::cout << "DEBUG: File path sent: " << lastrunIndexFilename << "\n\r";
+        //std::cout << "DEBUG: File path sent: " << lastrunIndexFilename << "\r\n";
         size_t file_size = 0;   //file does not exist
-        //std::cout << "DEBUG: File size is " << file_size << " bytes" << "\n\r";
+        //std::cout << "DEBUG: File size is " << file_size << " bytes" << "\r\n";
         
         // Send the file size
-        //std::cout << "DEBUG: Sending file size: " << file_size << " bytes" << "\n\r";
+        //std::cout << "DEBUG: Sending file size: " << file_size << " bytes" << "\r\n";
         sent_bytes = sendChunk(socket, &file_size, sizeof(size_t));
         if (sent_bytes < sizeof(size_t)) {
-            std::cerr << "Failed to send file size" << "\n\r";
+            std::cerr << "Failed to send file size" << "\r\n";
             unblock_transmit();
             return -1;
         }
@@ -212,7 +212,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), payloadSize);
     
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving payload for IndexPayloadCmd" << "\n\r";
+        std::cerr << "Error receiving payload for IndexPayloadCmd" << "\r\n";
         unblock_receive();  // Only unlock on error
         return -1;
     }
@@ -221,7 +221,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     size_t indexFileNameSize = 0;
     const auto deletions = parseDeletionLogFromBuffer(mData, indexFileNameSize, SEEK_CUR);
 
-    std::cout << "Received index for remote path: " << remotePath << "\n\r";
+    std::cout << "Received index for remote path: " << remotePath << "\r\n";
 
     const std::filesystem::path localPath = args.at("path");
     const std::filesystem::path indexpath = std::filesystem::path(localPath) / ".folderindex";
@@ -236,7 +236,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     int ret = ReceiveFile(fileargs);
     if ( ret < 0 )
     {
-        std::cerr << "Error receiving remote index file." << "\n\r";
+        std::cerr << "Error receiving remote index file." << "\r\n";
         unblock_receive();  // Only unlock on error
         return ret;
     }
@@ -245,7 +245,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     ret = ReceiveFile(fileargs);
     if ( ret < 0 )
     {
-        std::cerr << "Error receiving remote last run index file." << "\n\r";
+        std::cerr << "Error receiving remote last run index file." << "\r\n";
         unblock_receive();  // Only unlock on error
         return ret;
     }
@@ -263,39 +263,39 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
         std::filesystem::rename(indexpath, lastRunIndexPath);
     }
 
-    std::cout << "importing remote index" << "\n\r";
+    std::cout << "importing remote index" << "\r\n";
     DirectoryIndexer remoteIndexer(localPath, true, DirectoryIndexer::INDEX_TYPE_REMOTE);
     remoteIndexer.setPath(remotePath);
 
     DirectoryIndexer *lastRunRemoteIndexer = nullptr;
     if (std::filesystem::exists(remoteLastRunIndexPath))
     {
-        std::cout << "importing remote index from last run" << "\n\r";
+        std::cout << "importing remote index from last run" << "\r\n";
         lastRunRemoteIndexer = new DirectoryIndexer(localPath, true, DirectoryIndexer::INDEX_TYPE_REMOTE_LAST_RUN);
         lastRunRemoteIndexer->setPath(remotePath);
     }
 
-    std::cout << "remote and local indexes in hand, ready to sync" << "\n\r";
+    std::cout << "remote and local indexes in hand, ready to sync" << "\r\n";
     DirectoryIndexer *lastRunIndexer = nullptr;
     if (lastrunIndexPresent)
     {
-        std::cout << "importing local index from last run" << "\n\r";
+        std::cout << "importing local index from last run" << "\r\n";
         lastRunIndexer = new DirectoryIndexer(localPath, true, DirectoryIndexer::INDEX_TYPE_LOCAL_LAST_RUN);
     }
     DirectoryIndexer localIndexer(localPath, true, DirectoryIndexer::INDEX_TYPE_LOCAL);
     localIndexer.indexonprotobuf(false);
 
-    //std::cout << "local index size: " << localIndexer.count(nullptr, 10) << "\n\r";
-    //std::cout << "remote index size: " << remoteIndexer.count(nullptr, 10) << "\n\r";
+    //std::cout << "local index size: " << localIndexer.count(nullptr, 10) << "\r\n";
+    //std::cout << "remote index size: " << remoteIndexer.count(nullptr, 10) << "\r\n";
 
-    std::cout << "Exporting Sync commands." << "\n\r";
+    std::cout << "Exporting Sync commands." << "\r\n";
 
     SyncCommands syncCommands;
     localIndexer.sync(nullptr, lastRunIndexer, &remoteIndexer, lastRunRemoteIndexer, syncCommands, true, false);
 
     if (syncCommands.empty())
     {
-        std::cout << "No sync commands generated." << "\n\r";
+        std::cout << "No sync commands generated." << "\r\n";
         return 0;
     }
 
@@ -310,7 +310,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
             if (command.path1() == "\""+path+"\"")
             {
                 commandsToRemove.push_back(command);
-                std::cout << "Removing command because of deleted file: " << command.string() << "\n\r";
+                std::cout << "Removing command because of deleted file: " << command.string() << "\r\n";
             }
         }
     }
@@ -323,11 +323,11 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     // Sort the commands based on their priority
     // This will ensure that file creation commands are executed before deletions
     // and that the order of operations is correct
-    std::cout << "Sorting sync commands." << "\n\r";
+    std::cout << "Sorting sync commands." << "\r\n";
     syncCommands.sortCommands();
 
-    std::cout << "\n\r" << "Display Generated Sync Commands: ?" << "\n\r";
-    std::cout << "Total commands: " << syncCommands.size() << "\n\r";
+    std::cout << "\r\n" << "Display Generated Sync Commands: ?" << "\r\n";
+    std::cout << "Total commands: " << syncCommands.size() << "\r\n";
     
     // Check for auto_sync and dry_run options
     const bool auto_sync = (args.find("auto_sync") != args.end() && args.at("auto_sync") == "true");
@@ -339,7 +339,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
         // Show the traditional Y/N prompt
         do
         {
-            std::cout << "Print commands ? (Y/N) " << "\n\r";
+            std::cout << "Print commands ? (Y/N) " << "\r\n";
             std::cin >> answer;
         } while (!answer.starts_with('y') && !answer.starts_with('Y') &&
                  !answer.starts_with('n') && !answer.starts_with('N'));
@@ -370,17 +370,17 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
         // Show the traditional Y/N prompt for execution
         do
         {
-            std::cout << "Execute commands ? (Y/N) " << "\n\r";
+            std::cout << "Execute commands ? (Y/N) " << "\r\n";
             std::cin >> answer;
         } while (!answer.starts_with('y') && !answer.starts_with('Y') &&
                  !answer.starts_with('n') && !answer.starts_with('N'));
     } else if (auto_sync)
     {
-        std::cout << "Auto-sync mode enabled, executing commands without confirmation." << "\n\r";
+        std::cout << "Auto-sync mode enabled, executing commands without confirmation." << "\r\n";
         answer = "Y";
     } else if (dry_run)
     {
-        std::cout << "Dry run mode enabled, commands will not be executed." << "\n\r";
+        std::cout << "Dry run mode enabled, commands will not be executed." << "\r\n";
         answer = "N";
     }
 
@@ -388,7 +388,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     if ( FORCE_SYNC_COMMANDS_FILE_EXPORT || !auto_sync || dry_run)
     {
         const std::filesystem::path exportPath = localPath / "sync_commands.sh";
-        std::cout << "Exporting sync commands to file: " << exportPath << "\n\r";
+        std::cout << "Exporting sync commands to file: " << exportPath << "\r\n";
         syncCommands.exportToFile(exportPath);
     }
 
@@ -430,7 +430,7 @@ int IndexPayloadCmd::execute(const std::map<std::string, std::string> &args)
     TcpCommand::unblock_transmit();
     delete command;
 
-    std::cout << "Sent SYNC_COMPLETE to server" << "\n\r";
+    std::cout << "Sent SYNC_COMPLETE to server" << "\r\n";
     return 0;
 }
 
@@ -440,7 +440,7 @@ int MkdirCmd::execute(const std::map<std::string,std::string> &args)
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), 0);
     unblock_receive();
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving payload for MkdirCmd" << "\n\r";
+        std::cerr << "Error receiving payload for MkdirCmd" << "\r\n";
         return -1;
     }
 
@@ -454,7 +454,7 @@ int RmCmd::execute(const std::map<std::string,std::string> &args)
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), ALLOCATION_SIZE);
     unblock_receive();
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving payload for RmCmd" << "\n\r";
+        std::cerr << "Error receiving payload for RmCmd" << "\r\n";
         return -1;
     }
 
@@ -468,7 +468,7 @@ int FileFetchCmd::execute(const std::map<std::string,std::string> &args)
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), ALLOCATION_SIZE);
     unblock_receive();
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving payload for FileFetchCmd" << "\n\r";
+        std::cerr << "Error receiving payload for FileFetchCmd" << "\r\n";
         return -1;
     }
 
@@ -479,14 +479,14 @@ int FileFetchCmd::execute(const std::map<std::string,std::string> &args)
         block_transmit();
         if ( SendFile(fileargs) < 0 ) {
             unblock_transmit();
-            std::cerr << "Error sending file: " << path << "\n\r";
+            std::cerr << "Error sending file: " << path << "\r\n";
             MessageCmd::sendMessage(std::stoi(args.at("txsocket")), "Error sending file: " + path);
             return -1;
         }
         unblock_transmit();
     }
     else {
-        std::cerr << "File not found: " << path << "\n\r";
+        std::cerr << "File not found: " << path << "\r\n";
         MessageCmd::sendMessage(std::stoi(args.at("txsocket")), "File not found: " + path);
         return -1;
     }
@@ -499,7 +499,7 @@ int FilePushCmd::execute(const std::map<std::string,std::string> &args)
     size_t payloadSize = cmdSize() - kPayloadIndex;
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), ALLOCATION_SIZE);
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving file path in FilePushCmd" << "\n\r";
+        std::cerr << "Error receiving file path in FilePushCmd" << "\r\n";
         unblock_receive();
         return -1;
     }
@@ -508,7 +508,7 @@ int FilePushCmd::execute(const std::map<std::string,std::string> &args)
     std::map<std::string, std::string> fileargs = args;
     fileargs["path"] = path;
     
-    //std::cout << "DEBUG: FilePushCmd receiving file to path: " << path << "\n\r";
+    //std::cout << "DEBUG: FilePushCmd receiving file to path: " << path << "\r\n";
     int ret = ReceiveFile(fileargs);
     unblock_receive();
     return ret;
@@ -520,7 +520,7 @@ int RemoteLocalCopyCmd::execute(const std::map<std::string, std::string> &args)
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), ALLOCATION_SIZE);
     unblock_receive();
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving payload for RemoteLocalCopyCmd" << "\n\r";
+        std::cerr << "Error receiving payload for RemoteLocalCopyCmd" << "\r\n";
         return -1;
     }
 
@@ -531,11 +531,11 @@ int RemoteLocalCopyCmd::execute(const std::map<std::string, std::string> &args)
         std::filesystem::copy(srcPath, destPath, 
             std::filesystem::copy_options::overwrite_existing | 
             std::filesystem::copy_options::recursive);
-        std::cout << "Copied " << srcPath << " to " << destPath << "\n\r";
+        std::cout << "Copied " << srcPath << " to " << destPath << "\r\n";
         return 0;
     } catch (const std::filesystem::filesystem_error &e) {
         std::cerr << "Error copying " << srcPath << " to " << destPath 
-                  << ": " << e.what() << "\n\r";
+                  << ": " << e.what() << "\r\n";
         return -1;
     }
 }
@@ -553,7 +553,7 @@ int MessageCmd::execute(const std::map<std::string, std::string> &args)
     mData.read(message, messageSize);
     message[messageSize] = '\0';
 
-    std::cout << "[" << args.at("ip") << "] " << message << "\n\r";
+    std::cout << "[" << args.at("ip") << "] " << message << "\r\n";
     delete[] message;
 
     return 0;
@@ -565,7 +565,7 @@ int RmdirCmd::execute(const std::map<std::string,std::string> &args)
     size_t bytesReceived = receivePayload(std::stoi(args.at("txsocket")), ALLOCATION_SIZE);
     unblock_receive();
     if (bytesReceived < payloadSize) {
-        std::cerr << "Error receiving payload for RmdirCmd" << "\n\r";
+        std::cerr << "Error receiving payload for RmdirCmd" << "\r\n";
         return -1;
     }
 
@@ -591,10 +591,10 @@ int SyncCompleteCmd::execute(const std::map<std::string, std::string> &args)
     command->transmit(args, true);
     delete command;
 
-    std::cout << "Sync complete for " << args.at("path") << "\n\r";
+    std::cout << "Sync complete for " << args.at("path") << "\r\n";
     // Check if we should exit after sync (for unit testing)
     if (args.find("exit_after_sync") != args.end() && args.at("exit_after_sync") == "true") {
-        std::cout << "Exiting server after sync completion (unit testing mode)" << "\n\r";
+        std::cout << "Exiting server after sync completion (unit testing mode)" << "\r\n";
         exit(0);
     }
     return 1;
@@ -604,6 +604,6 @@ int SyncDoneCmd::execute(const std::map<std::string, std::string> &args)
 {
     unblock_receive();
     
-    std::cout << "Sync done for " << args.at("path") << "\n\r";
+    std::cout << "Sync done for " << args.at("path") << "\r\n";
     return 1;
 }
\ No newline at end of file
diff --git a/tcp_command/tcp_command_utils.cpp b/tcp_command/tcp_command_utils.cpp
index 17ede74..ca763b1 100644
--- a/tcp_command/tcp_command_utils.cpp
+++ b/tcp_command/tcp_command_utils.cpp
@@ -136,16 +136,16 @@ size_t TcpCommand::sendChunk(const int socket, const void* buffer, size_t len)
         if (num <= 0) {
             if (num == 0) {
                 std::cerr << "Connection closed by peer after sending "
-                          << HumanReadable(chunk_sent) << "\n\r";
+                          << HumanReadable(chunk_sent) << "\r\n";
             } else {
                 std::cerr << "Send error at " << HumanReadable(chunk_sent)
-                          << ": " << strerror(errno) << "\n\r";
+                          << ": " << strerror(errno) << "\r\n";
             }
             return -1;
         }
         chunk_sent += num;
         //std::cout << "DEBUG: Sent chunk of " << n
-        //          << " (chunk progress: " << HumanReadable(chunk_sent) << "/" << HumanReadable(len) << ")" << "\n\r";
+        //          << " (chunk progress: " << HumanReadable(chunk_sent) << "/" << HumanReadable(len) << ")" << "\r\n";
     }
     return chunk_sent;
 }
@@ -159,18 +159,18 @@ ssize_t TcpCommand::ReceiveChunk(const int socket, void* buffer, size_t len)
         if (num <= 0) {
             if (num == 0) {
                 std::cerr << "Connection closed by peer after receiving "
-                            << chunk_received << " bytes" << "\n\r";
+                            << chunk_received << " bytes" << "\r\n";
                 return -1;
             }
             std::cerr << "Receive error at " << chunk_received 
-                            << " bytes: " << strerror(errno) << "\n\r";
+                            << " bytes: " << strerror(errno) << "\r\n";
             return -1;
         }
 
         chunk_received += num;
         //std::cout << "DEBUG: Received chunk of " << HumanReadable(n) 
         //            << "(chunk progress: " << HumanReadable(chunk_received) 
-        //            << "/" << HumanReadable(len) << "\n\r";
+        //            << "/" << HumanReadable(len) << "\r\n";
     }
 
     return chunk_received;
-- 
2.43.0

